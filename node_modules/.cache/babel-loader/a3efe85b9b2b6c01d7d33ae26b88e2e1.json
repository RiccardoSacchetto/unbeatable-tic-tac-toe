{"ast":null,"code":"export default function computerMove(array, player) {\n  let cross = [];\n  let circle = [];\n  array.forEach((el, i) => {\n    if (el === 1) {\n      cross.push(i);\n    }\n\n    if (el === 2) {\n      circle.push(i);\n    }\n  });\n  const winning = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  if (cross.length <= 1 && circle.length <= 1) {\n    //FIRST TURN\n    if (!cross.includes(4) && !circle.includes(4)) {\n      array.splice(4, 1, player);\n    } else if (cross.includes(4) || circle.includes(4)) {\n      const options = [0, 2, 6, 8];\n      let randomNum = Math.floor(Math.random() * options.length);\n\n      if (circle.includes(options[randomNum])) {\n        //ABSOLUTE FIRST TURN\n        array.splice(options[randomNum + 1], 1, player);\n      } else {\n        array.splice(options[randomNum], 1, player);\n      }\n    }\n  } else if (cross.length >= 2) {\n    //SECOND+ TURN\n    let moved = false;\n\n    function circleFirst() {\n      if (!moved) {\n        //searching for a possible win for circle\n        for (let i = 0; i < winning.length; i++) {\n          const [a, b, c] = winning[i];\n\n          if (circle.includes(a) && circle.includes(b) && !cross.includes(c)) {\n            array.splice(c, 1, player);\n            moved = true;\n          } else if (circle.includes(a) && circle.includes(c) && !cross.includes(b)) {\n            array.splice(b, 1, player);\n            moved = true;\n          } else if (circle.includes(b) && circle.includes(c) && !cross.includes(a)) {\n            array.splice(a, 1, player);\n            moved = true;\n          }\n        }\n      }\n    }\n\n    function crossFirst() {\n      if (!moved) {\n        if (cross.length === 2) {\n          //special case if computer is second and second turn\n          if (circle.includes(4) && cross.includes(3) && cross.includes(1)) {\n            array.splice(0, 1, player);\n            moved = true;\n          } else if (circle.includes(4) && cross.includes(1) && cross.includes(5)) {\n            array.splice(2, 1, player);\n            moved = true;\n          } else if (circle.includes(4) && cross.includes(5) && cross.includes(7)) {\n            array.splice(8, 1, player);\n            moved = true;\n          } else if (circle.includes(4) && cross.includes(7) && cross.includes(3)) {\n            array.splice(6, 1, player);\n            moved = true;\n          }\n        }\n\n        if (!moved) {\n          //searching for a possible win for cross\n          for (let i = 0; i < winning.length; i++) {\n            const [a, b, c] = winning[i];\n\n            if (cross.includes(a) && cross.includes(b) && !circle.includes(c)) {\n              array.splice(c, 1, player);\n              moved = true;\n            } else if (cross.includes(a) && cross.includes(c) && !circle.includes(b)) {\n              array.splice(b, 1, player);\n              moved = true;\n            } else if (cross.includes(b) && cross.includes(c) && !circle.includes(a)) {\n              array.splice(a, 1, player);\n              moved = true;\n            }\n          }\n        }\n      }\n    }\n\n    let emptyArray = [];\n    array.forEach((el, i) => {\n      if (el === null) {\n        emptyArray.push(i);\n      }\n    });\n\n    if (!moved) {\n      if (player === 1) {\n        // STRATEGIES FOR ATTACK IF YOU ARE NOT UNDER ONE\n        crossFirst();\n        circleFirst();\n\n        if (!moved) {\n          for (let i = 0; i < winning.length; i++) {\n            const [a, b, c] = winning[i];\n\n            if (!moved) {\n              if (cross.includes(a) && emptyArray.includes(b) && emptyArray.includes(c)) {\n                array.splice(c, 1, player);\n                moved = true;\n              } else if (cross.includes(b) && emptyArray.includes(a) && emptyArray.includes(c)) {\n                array.splice(a, 1, player);\n                moved = true;\n              } else if (cross.includes(c) && emptyArray.includes(a) && emptyArray.includes(b)) {\n                array.splice(a, 1, player);\n                moved = true;\n              }\n            }\n          }\n        }\n      } else if (player === 2) {\n        circleFirst();\n        crossFirst();\n\n        if (!moved) {\n          for (let i = 0; i < winning.length; i++) {\n            const [a, b, c] = winning[i];\n\n            if (!moved) {\n              if (circle.includes(a) && emptyArray.includes(b) && emptyArray.includes(c)) {\n                array.splice(c, 1, player);\n                moved = true;\n              } else if (circle.includes(b) && emptyArray.includes(a) && emptyArray.includes(c)) {\n                array.splice(a, 1, player);\n                moved = true;\n              } else if (circle.includes(c) && emptyArray.includes(a) && emptyArray.includes(b)) {\n                array.splice(a, 1, player);\n                moved = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!moved) {\n      let randomNum = Math.floor(Math.random() * emptyArray.length);\n      array.splice(emptyArray[randomNum], 1, player);\n      moved = true;\n    }\n  }\n\n  return array;\n}","map":{"version":3,"sources":["C:/web-dev/GitHub/tic-tac-toe/src/functions/computerMove.js"],"names":["computerMove","array","player","cross","circle","forEach","el","i","push","winning","length","includes","splice","options","randomNum","Math","floor","random","moved","circleFirst","a","b","c","crossFirst","emptyArray"],"mappings":"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","sourcesContent":["export default function computerMove(array, player) {\r\n    let cross = []\r\n    let circle = []\r\n\r\n    array.forEach( (el, i) => {\r\n        if (el === 1) { cross.push(i)}\r\n        if (el === 2) { circle.push(i)}\r\n    })\r\n\r\n    const winning = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n\r\n    if (cross.length <= 1 && circle.length <= 1) { //FIRST TURN\r\n        \r\n        if (!cross.includes(4) && !circle.includes(4)) {\r\n            array.splice(4, 1, player)\r\n        \r\n        } else if (cross.includes(4) || circle.includes(4)) {\r\n            const options = [0, 2, 6, 8]\r\n            let randomNum = Math.floor(Math.random()*options.length)\r\n            if (circle.includes(options[randomNum])) { //ABSOLUTE FIRST TURN\r\n                array.splice(options[(randomNum + 1)], 1, player)\r\n\r\n            } else { \r\n                array.splice(options[randomNum], 1, player) \r\n            }\r\n        }\r\n\r\n    } else if (cross.length >= 2) { //SECOND+ TURN\r\n        let moved = false\r\n\r\n        function circleFirst() {\r\n            if (!moved) { //searching for a possible win for circle\r\n                for(let i=0; i<winning.length; i++) {\r\n                    const [a, b, c] = winning[i]\r\n                    if (circle.includes(a) && circle.includes(b) && !cross.includes(c)) {\r\n                        array.splice(c, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(a) && circle.includes(c) && !cross.includes(b)) {\r\n                        array.splice(b, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(b) && circle.includes(c) && !cross.includes(a)) {\r\n                        array.splice(a, 1, player)\r\n                        moved = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function crossFirst() {\r\n            if (!moved) { \r\n                if (cross.length === 2) { //special case if computer is second and second turn\r\n                    if (circle.includes(4) && cross.includes(3) && cross.includes(1)) {\r\n                        array.splice(0, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(4) && cross.includes(1) && cross.includes(5)) {\r\n                        array.splice(2, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(4) && cross.includes(5) && cross.includes(7)) {\r\n                        array.splice(8, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(4) && cross.includes(7) && cross.includes(3)) {\r\n                        array.splice(6, 1, player)\r\n                        moved = true\r\n                    }\r\n                }\r\n\r\n                if(!moved) { //searching for a possible win for cross\r\n                    for(let i=0; i<winning.length; i++) {\r\n                        const [a, b, c] = winning[i]\r\n                        if (cross.includes(a) && cross.includes(b) && !circle.includes(c)) {\r\n                            array.splice(c, 1, player)\r\n                            moved = true\r\n                        } else if (cross.includes(a) && cross.includes(c) && !circle.includes(b)) {\r\n                            array.splice(b, 1, player)\r\n                            moved = true\r\n                        } else if (cross.includes(b) && cross.includes(c) && !circle.includes(a)) {\r\n                            array.splice(a, 1, player)\r\n                            moved = true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let emptyArray = []\r\n            array.forEach((el, i) => {\r\n                if (el === null) { emptyArray.push(i)}\r\n            })\r\n\r\n        if (!moved) {   \r\n            if (player === 1) { // STRATEGIES FOR ATTACK IF YOU ARE NOT UNDER ONE\r\n                crossFirst()\r\n                circleFirst()\r\n                if (!moved) {\r\n                    for(let i=0; i<winning.length; i++) {\r\n                        const [a, b, c] = winning[i]\r\n                        if (!moved) {\r\n                            if (cross.includes(a) && emptyArray.includes(b) && emptyArray.includes(c)) {\r\n                                array.splice(c, 1, player)\r\n                                moved = true\r\n                            } else if (cross.includes(b) && emptyArray.includes(a) && emptyArray.includes(c)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n                            } else if (cross.includes(c) && emptyArray.includes(a) && emptyArray.includes(b)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n    \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (player === 2) {\r\n                circleFirst()\r\n                crossFirst()\r\n                if (!moved) {\r\n                    for(let i=0; i<winning.length; i++) {\r\n                        const [a, b, c] = winning[i]\r\n                        if (!moved) {\r\n                            if (circle.includes(a) && emptyArray.includes(b) && emptyArray.includes(c)) {\r\n                                array.splice(c, 1, player)\r\n                                moved = true\r\n                            } else if (circle.includes(b) && emptyArray.includes(a) && emptyArray.includes(c)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n                            } else if (circle.includes(c) && emptyArray.includes(a) && emptyArray.includes(b)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!moved) {\r\n            let randomNum = Math.floor(Math.random()*emptyArray.length)\r\n            array.splice(emptyArray[randomNum], 1, player)\r\n            moved = true\r\n        }\r\n    }\r\n    return array\r\n}\r\n"]},"metadata":{},"sourceType":"module"}