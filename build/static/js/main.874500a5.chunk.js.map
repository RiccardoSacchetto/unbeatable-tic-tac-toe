{"version":3,"sources":["components/Circle.js","components/Cross.js","components/Box.js","components/Footer.js","components/Game.js","functions/winFunction.js","functions/computerMove.js","App.js","index.js"],"names":["Circle","className","Cross","Box","id","boxes","onClick","names","Button","win","turn","useState","display","setDisplay","useEffect","emptyArray","forEach","el","i","push","move","length","includes","handleText","style","disabled","Game","crossIsNext","setCrossIsNext","Array","fill","setBoxes","lineClass","array","winner","winningClassNames","a","b","c","winFunction","computerTurn","setComputerTurn","undefined","handleTurn","num","tempArrayBoxes","setTimeout","tempBoxes","player","cross","circle","winning","options","randomNum","Math","floor","random","splice","moved","circleFirst","crossFirst","computerMove","map","box","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.874500a5.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Circle() {\r\n    return (\r\n        <i className=\"circle far fa-circle\"></i>\r\n    )\r\n}\r\n\r\nexport default Circle","import React from \"react\"\r\n\r\nfunction Cross() {\r\n    return (\r\n        <i className=\"cross fas fa-times\"></i>\r\n    )\r\n}\r\n\r\nexport default Cross","import React from \"react\"\r\nimport Circle from \"./Circle\"\r\nimport Cross from \"./Cross\"\r\n\r\n\r\nfunction Box({id, boxes, onClick, names}) {\r\n\r\n    const ids = [\r\n        \"top-left\",    \r\n        \"top\",\r\n        \"top-right\",\r\n        \"left\",\r\n        \"center\",\r\n        \"right\",\r\n        \"bottom-left\",\r\n        \"bottom\",\r\n        \"bottom-right\"\r\n    ]\r\n\r\n    return(\r\n        <div className=\"box\" onClick={() => onClick(id)}>\r\n            <div className=\"inside-box\" id={ids[id]}>\r\n                { boxes === 1 && <Cross /> }\r\n                { boxes === 2 && <Circle /> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nfunction Button({win, onClick, boxes, turn}) {\r\n    const [display, setDisplay] = useState({display : \"none\"})\r\n\r\n    function handleText() {\r\n        let emptyArray = []\r\n        boxes.forEach((el, i) => {\r\n            if (el === null) { emptyArray.push(i)}\r\n        })\r\n        let move = (9- emptyArray.length)\r\n\r\n        if (boxes.includes(null) === false ) {\r\n            return \"DRAW\"\r\n        } else {\r\n            if(((move === 0 || move === 2 || move === 4 || move === 6 || move === 8) && turn === 2) ||\r\n                ((move === 1 || move === 3 || move === 5 || move === 7 || move === 9) && turn === 1)) {\r\n                if (win) {\r\n                    return \"COMPUTER WIN\"\r\n                }\r\n                if (!win) return \"PLAYER TURN\"\r\n            } else if(((move === 1 || move === 3 || move === 5 || move === 7 || move === 9) && turn === 2) ||\r\n                    ((move === 0 || move === 2 || move === 4 || move === 6 || move === 8) && turn === 1)) {\r\n                if (win) return \"PLAYER WIN\"\r\n                if (!win) return \"COMPUTER TURN\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (win) {\r\n            setDisplay({display: \"block\"})}\r\n\r\n    }, [win])\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"turn-p\">{handleText()}</p>\r\n            <div className=\"button-container\">\r\n                <button  style={display} className=\"button button-start\" onClick={onClick} disabled={!win}>\r\n                restart\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import React, {useEffect, useState} from \"react\";\r\nimport Box from \"./Box\"\r\nimport Footer from \"./Footer\";\r\nimport winFunction from \"../functions/winFunction.js\"\r\nimport computerMove from \"../functions/computerMove\"\r\n\r\n// Legenda: \r\n// 0 || null = null\r\n// 1= cross\r\n// 2= circle\r\n\r\nfunction Game() {\r\n    const [crossIsNext, setCrossIsNext] = useState(true)\r\n    const [boxes, setBoxes] = useState(Array(9).fill(null))\r\n    const lineClass = winFunction(boxes)\r\n    const [computerTurn, setComputerTurn] = useState(2)\r\n    const win = handleWinner()\r\n    function handleWinner() {\r\n        if(boxes.includes(null) === false || lineClass !== undefined) { return true } else return false\r\n    }\r\n\r\n    function handleTurn(num) {\r\n        \r\n        if(boxes[num] === null && win === false) {\r\n            let tempArrayBoxes = [...boxes]\r\n            tempArrayBoxes[num] = crossIsNext ? 1 : 2\r\n            setBoxes(tempArrayBoxes)\r\n            setCrossIsNext(!crossIsNext)\r\n        }      \r\n    }\r\n\r\n    function handleGame() {\r\n        if (computerTurn === 1) {\r\n            setComputerTurn(2)\r\n        } else { \r\n            setComputerTurn(1)\r\n        }\r\n        setBoxes(Array(9).fill(null))\r\n        setCrossIsNext(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ((!win) && ((computerTurn === 2 && !crossIsNext) || (computerTurn === 1 && crossIsNext))) {\r\n            setTimeout(() => {\r\n                let tempBoxes = computerMove(boxes, computerTurn)\r\n                setBoxes(tempBoxes)\r\n                setCrossIsNext(!crossIsNext)\r\n            }, 150)\r\n        }   \r\n    }, [crossIsNext, computerTurn])\r\n\r\n    return (\r\n        <div id=\"app\">\r\n            <div id=\"game\" className={lineClass}>\r\n                {boxes.map( (box, i) => {\r\n                    return (\r\n                        <Box key={i + 1 } id={i} boxes={box} onClick={handleTurn}/>\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n            <Footer win={win} boxes={boxes} turn={computerTurn} onClick={handleGame}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n    /* do a big check and if is okay jus style the text of the winner*/","export default function winFunction(array) {  \r\n    const winner = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    \r\n    const winningClassNames = [\r\n        \"line-top\",\r\n        \"line-center\",\r\n        \"line-bottom\",\r\n        \"line-left\",\r\n        \"line-center-vertical\",\r\n        \"line-right\",\r\n        \"line-diagonal-left\",\r\n        \"line-diagonal-right\",    \r\n    ]\r\n\r\n    for (let i = 0; i< winner.length; i++) {\r\n        const [a, b, c] = winner[i]\r\n        if (array[a] && array[a] === array[b] && array[a] === array[c]) {\r\n            return winningClassNames[i]\r\n        } \r\n    }\r\n}","export default function computerMove(array, player) {\r\n    let cross = []\r\n    let circle = []\r\n\r\n    array.forEach( (el, i) => {\r\n        if (el === 1) { cross.push(i)}\r\n        if (el === 2) { circle.push(i)}\r\n    })\r\n\r\n    const winning = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n\r\n    if (cross.length <= 1 && circle.length <= 1) { //FIRST TURN\r\n        \r\n        if (!cross.includes(4) && !circle.includes(4)) {\r\n            array.splice(4, 1, player)\r\n        \r\n        } else if (cross.includes(4) || circle.includes(4)) {\r\n            const options = [0, 2, 6, 8]\r\n            let randomNum = Math.floor(Math.random()*options.length)\r\n            if (circle.includes(options[randomNum])) { //ABSOLUTE FIRST TURN\r\n                array.splice(options[(randomNum + 1)], 1, player)\r\n\r\n            } else { \r\n                array.splice(options[randomNum], 1, player) \r\n            }\r\n        }\r\n\r\n    } else if (cross.length >= 2) { //SECOND+ TURN\r\n        let moved = false\r\n\r\n        function circleFirst() {\r\n            if (!moved) { //searching for a possible win for circle\r\n                for(let i=0; i<winning.length; i++) {\r\n                    const [a, b, c] = winning[i]\r\n                    if (circle.includes(a) && circle.includes(b) && !cross.includes(c)) {\r\n                        array.splice(c, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(a) && circle.includes(c) && !cross.includes(b)) {\r\n                        array.splice(b, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(b) && circle.includes(c) && !cross.includes(a)) {\r\n                        array.splice(a, 1, player)\r\n                        moved = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function crossFirst() {\r\n            if (!moved) { \r\n                if (cross.length === 2) { //special case if computer is second and second turn\r\n                    if (circle.includes(4) && cross.includes(3) && cross.includes(1)) {\r\n                        array.splice(0, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(4) && cross.includes(1) && cross.includes(5)) {\r\n                        array.splice(2, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(4) && cross.includes(5) && cross.includes(7)) {\r\n                        array.splice(8, 1, player)\r\n                        moved = true\r\n                    } else if (circle.includes(4) && cross.includes(7) && cross.includes(3)) {\r\n                        array.splice(6, 1, player)\r\n                        moved = true\r\n                    }\r\n                }\r\n\r\n                if(!moved) { //searching for a possible win for cross\r\n                    for(let i=0; i<winning.length; i++) {\r\n                        const [a, b, c] = winning[i]\r\n                        if (cross.includes(a) && cross.includes(b) && !circle.includes(c)) {\r\n                            array.splice(c, 1, player)\r\n                            moved = true\r\n                        } else if (cross.includes(a) && cross.includes(c) && !circle.includes(b)) {\r\n                            array.splice(b, 1, player)\r\n                            moved = true\r\n                        } else if (cross.includes(b) && cross.includes(c) && !circle.includes(a)) {\r\n                            array.splice(a, 1, player)\r\n                            moved = true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let emptyArray = []\r\n            array.forEach((el, i) => {\r\n                if (el === null) { emptyArray.push(i)}\r\n            })\r\n\r\n        if (!moved) {   \r\n            if (player === 1) { // STRATEGIES FOR ATTACK IF YOU ARE NOT UNDER ONE\r\n                crossFirst()\r\n                circleFirst()\r\n                if (!moved) {\r\n                    for(let i=0; i<winning.length; i++) {\r\n                        const [a, b, c] = winning[i]\r\n                        if (!moved) {\r\n                            if (cross.includes(a) && emptyArray.includes(b) && emptyArray.includes(c)) {\r\n                                array.splice(c, 1, player)\r\n                                moved = true\r\n                            } else if (cross.includes(b) && emptyArray.includes(a) && emptyArray.includes(c)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n                            } else if (cross.includes(c) && emptyArray.includes(a) && emptyArray.includes(b)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n    \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (player === 2) {\r\n                circleFirst()\r\n                crossFirst()\r\n                if (!moved) {\r\n                    for(let i=0; i<winning.length; i++) {\r\n                        const [a, b, c] = winning[i]\r\n                        if (!moved) {\r\n                            if (circle.includes(a) && emptyArray.includes(b) && emptyArray.includes(c)) {\r\n                                array.splice(c, 1, player)\r\n                                moved = true\r\n                            } else if (circle.includes(b) && emptyArray.includes(a) && emptyArray.includes(c)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n                            } else if (circle.includes(c) && emptyArray.includes(a) && emptyArray.includes(b)) {\r\n                                array.splice(a, 1, player)\r\n                                moved = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!moved) {\r\n            let randomNum = Math.floor(Math.random()*emptyArray.length)\r\n            array.splice(emptyArray[randomNum], 1, player)\r\n            moved = true\r\n        }\r\n    }\r\n    return array\r\n}\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\"\r\n\r\nfunction App() {\r\n    return (\r\n        <Game />\r\n    )\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}